using System;
using System.Collections.Generic;
using System.Text;
using AI4E.Utils.Memory;
using JetBrains.dotMemoryUnit;
using NUnit.Framework;

namespace HtmlAgilityPackCore.Tests
{
    [TestFixture]
    public class Base64ExtendedTest
    {
       private static string b64TestHtml =
                "";
       string b64Decoded;
        public Base64ExtendedTest()
        {

            var fromBase64Chars = Base64Coder.FromBase64Chars(b64TestHtml);
            
            b64Decoded = System.Text.Encoding.UTF8.GetString(fromBase64Chars);
        }

        [Test]
        [AssertTraffic(AllocatedObjectsCount = 50)]
        public void Test1()
        {
            
            HtmlDocument docu = new HtmlDocument();
            docu.LoadHtml(b64Decoded).Wait();
            Assert.AreEqual("#1342590", docu.DocumentNode.SelectSingleNode("/html/body/div[2]/div[2]/div[2]/div/div/div[2]/p/strong").InnerText);
        }
    }
}
